#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tracking-api:server');
var http = require('http');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create HTTP socket io.
 */
var socketIO = require('socket.io').listen(server);

var users = {};
var name = "";

app.get('/:name', function(req, res) {
    name = req.params.name;
    console.log("users[socket.id]", name)
    res.sendFile(path.join(__dirname, "../views/index.html"));
})


socketIO.sockets.on("connection", function(socket) {
    users[socket.id] = name;
    console.log("users[socket.id]", users[socket.id])
    socket.on("room", function(room) {
        socket.join(room);
        socket.broadcast.in(room).emit("new user", users[socket.id] + ": new user has joined")
    });

    socket.on("new message", function(data) {
        socketIO.sockets.in("room").emit("news", users[socket.id] + ": " + data);
    })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}